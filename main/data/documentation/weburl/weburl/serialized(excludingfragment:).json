{"sections":[],"identifier":{"url":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/serialized(excludingFragment:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/WebURL","doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL"]]},"variants":[{"paths":["\/documentation\/weburl\/weburl\/serialized(excludingfragment:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"serialized","kind":"identifier"},{"text":"(","kind":"text"},{"text":"excludingFragment","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" = false) -> ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"name":"excludingFragment","content":[{"type":"paragraph","inlineContent":[{"text":"Whether the fragment should be omitted from the result. The default is ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The serialization of a URL is defined by the URL Standard. This is the same serialization as is used","type":"text"},{"text":" ","type":"text"},{"text":"when initializing a String from a ","type":"text"},{"type":"codeVoice","code":"WebURL"},{"text":" value, printing a ","type":"text"},{"type":"codeVoice","code":"WebURL"},{"text":", or encoding a ","type":"text"},{"code":"WebURL","type":"codeVoice"},{"text":" ","type":"text"},{"text":"using ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["let url: WebURL = ...","url.serialized()","String(url)      \/\/ Same as above.","print(url)       \/\/ Same as print(url.serialized())"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"Idempotence","text":"Idempotence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The URL Standard ensures that the combination of parser, serializer, and API, guarantee idempotence."},{"type":"text","text":" "},{"type":"text","text":"This means that any "},{"type":"codeVoice","code":"WebURL"},{"type":"text","text":" value may be converted to a string (for example, in a log file or JSON)"},{"type":"text","text":" "},{"type":"text","text":"and re-parsed, and the result is guaranteed to be identical to the original "},{"type":"codeVoice","code":"WebURL"},{"type":"text","text":"."}]},{"type":"codeListing","code":["func takesURLAsString(_ urlString: String) {","  \/\/ ✅ If `urlString` is a serialized WebURL, this is guaranteed","  \/\/    to reconstruct the value exactly.","  let reparsed = WebURL(urlString)","  assert(reparsed.serialized() == urlString)","}"],"syntax":"swift"},{"type":"aside","style":"tip","content":[{"inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"In Swift terms, this means that WebURL is "},{"type":"codeVoice","code":"LosslessStringConvertible"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"This may seem like an obvious feature, but not all URL libraries offer it."},{"type":"text","text":" "},{"type":"text","text":"Some libraries require special "},{"code":"normalize()","type":"codeVoice"},{"type":"text","text":" functions, or that you enable a ‘relaxed’ parsing mode,"},{"type":"text","text":" "},{"type":"text","text":"and some URL types have additional state which isn’t part of the serialization at all!"}]}]}]}],"abstract":[{"type":"text","text":"Returns the string representation of this URL."}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/init(_:)"],"title":"Related Documentation"}],"metadata":{"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"serialized"},{"kind":"text","text":"("},{"kind":"externalParam","text":"excludingFragment"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}],"role":"symbol","roleHeading":"Instance Method","modules":[{"name":"WebURL"}],"externalID":"s:6WebURLAAV10serialized17excludingFragmentSSSb_tF","title":"serialized(excludingFragment:)","extendedModule":"WebURL"},"kind":"symbol","schemaVersion":{"major":0,"minor":1,"patch":0},"references":{"doc://com.karwa.WebURL/documentation/WebURL/WebURL":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WebURL"}],"url":"\/documentation\/weburl\/weburl","abstract":[{"type":"text","text":"A Uniform Resource Locator (URL) is a universal identifier,"},{"type":"text","text":" "},{"type":"text","text":"which often describes the location of a resource."}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebURL"}],"title":"WebURL","kind":"symbol"},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/init(_:)":{"role":"symbol","type":"topic","abstract":[{"text":"Parses a URL string.","type":"text"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/init(_:)","url":"\/documentation\/weburl\/weburl\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"StringType","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"StringType","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","title":"init(_:)"},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/serialized(excludingFragment:)":{"abstract":[{"text":"Returns the string representation of this URL.","type":"text"}],"kind":"symbol","title":"serialized(excludingFragment:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"serialized","kind":"identifier"},{"text":"(","kind":"text"},{"text":"excludingFragment","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"role":"symbol","url":"\/documentation\/weburl\/weburl\/serialized(excludingfragment:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/serialized(excludingFragment:)","type":"topic"},"doc://com.karwa.WebURL/documentation/WebURL":{"abstract":[{"text":"A new URL type for Swift.","type":"text"}],"title":"WebURL","kind":"symbol","role":"collection","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL","type":"topic","url":"\/documentation\/weburl"}}}